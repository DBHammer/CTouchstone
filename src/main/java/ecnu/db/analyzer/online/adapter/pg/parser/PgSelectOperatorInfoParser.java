
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ecnu.db.analyzer.online.adapter.pg.parser;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Set;
import java.util.HashSet;
import java.math.BigDecimal;
import ecnu.db.generator.constraintchain.arithmetic.*;
import ecnu.db.generator.constraintchain.arithmetic.operator.*;
import ecnu.db.generator.constraintchain.arithmetic.value.*;
import ecnu.db.generator.constraintchain.filter.operation.*;
import ecnu.db.generator.constraintchain.filter.logical.*;
import ecnu.db.generator.constraintchain.filter.*;
import ecnu.db.analyzer.online.AbstractAnalyzer;
import java.io.StringReader;
import ecnu.db.schema.Schema;
import ecnu.db.utils.exception.TouchstoneException;
import ecnu.db.schema.ColumnType;
import ecnu.db.schema.ColumnManager;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class PgSelectOperatorInfoParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return PgSelectSymbol.class;
}

  /** Default constructor. */
  @Deprecated
  public PgSelectOperatorInfoParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public PgSelectOperatorInfoParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PgSelectOperatorInfoParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\057\000\002\002\004\000\002\002\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\005\007\000\002\005\005\000\002\006\005\000" +
    "\002\007\003\000\002\007\003\000\002\010\007\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\013\003\000\002\013\003\000\002\014\013\000\002" +
    "\025\003\000\002\025\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\016\003" +
    "\000\002\016\004\000\002\017\011\000\002\026\003\000" +
    "\002\026\003\000\002\020\007\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\022\006" +
    "\000\002\023\003\000\002\023\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\112\000\004\010\016\001\002\000\012\002\uffea\011" +
    "\uffea\017\uffea\020\uffea\001\002\000\012\002\ufff7\011\ufff7" +
    "\017\ufff7\020\ufff7\001\002\000\004\002\000\001\002\000" +
    "\012\002\ufffc\011\ufffc\017\ufffc\020\ufffc\001\002\000\012" +
    "\002\uffeb\011\uffeb\017\uffeb\020\uffeb\001\002\000\012\002" +
    "\ufffd\011\ufffd\017\ufffd\020\ufffd\001\002\000\012\002\uffff" +
    "\011\uffff\017\uffff\020\uffff\001\002\000\012\002\ufff8\011" +
    "\ufff8\017\ufff8\020\ufff8\001\002\000\004\002\114\001\002" +
    "\000\012\002\ufffe\011\ufffe\017\ufffe\020\ufffe\001\002\000" +
    "\012\010\024\031\017\034\022\035\025\001\002\000\030" +
    "\004\uffdb\005\uffdb\006\uffdb\007\uffdb\011\uffdb\021\uffdb\022" +
    "\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\001\002\000\006" +
    "\017\107\020\110\001\002\000\016\021\072\022\065\023" +
    "\064\024\061\025\070\026\063\001\002\000\022\012\031" +
    "\014\033\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026" +
    "\uffdc\001\002\000\004\011\106\001\002\000\012\010\024" +
    "\031\017\034\027\035\025\001\002\000\030\004\uffda\005" +
    "\uffda\006\uffda\007\uffda\011\uffda\021\uffda\022\uffda\023\uffda" +
    "\024\uffda\025\uffda\026\uffda\001\002\000\026\004\062\005" +
    "\057\006\067\007\071\021\072\022\065\023\064\024\061" +
    "\025\070\026\063\001\002\000\034\004\uffdc\005\uffdc\006" +
    "\uffdc\007\uffdc\011\030\012\031\014\033\021\uffdc\022\uffdc" +
    "\023\uffdc\024\uffdc\025\uffdc\026\uffdc\001\002\000\012\015" +
    "\035\016\042\027\036\030\037\001\002\000\004\011\uffd3" +
    "\001\002\000\004\011\034\001\002\000\004\011\uffd4\001" +
    "\002\000\012\002\uffd5\011\uffd5\017\uffd5\020\uffd5\001\002" +
    "\000\004\032\uffdf\001\002\000\004\032\uffde\001\002\000" +
    "\004\010\uffe7\001\002\000\004\010\045\001\002\000\004" +
    "\032\043\001\002\000\004\010\uffe8\001\002\000\004\011" +
    "\044\001\002\000\012\002\uffe0\011\uffe0\017\uffe0\020\uffe0" +
    "\001\002\000\012\031\046\032\050\033\052\035\053\001" +
    "\002\000\014\011\uffe4\031\uffe4\032\uffe4\033\uffe4\035\uffe4" +
    "\001\002\000\014\011\054\031\046\032\050\033\052\035" +
    "\053\001\002\000\014\011\uffe6\031\uffe6\032\uffe6\033\uffe6" +
    "\035\uffe6\001\002\000\014\011\uffe2\031\uffe2\032\uffe2\033" +
    "\uffe2\035\uffe2\001\002\000\014\011\uffe5\031\uffe5\032\uffe5" +
    "\033\uffe5\035\uffe5\001\002\000\014\011\uffe3\031\uffe3\032" +
    "\uffe3\033\uffe3\035\uffe3\001\002\000\004\011\056\001\002" +
    "\000\014\011\uffe1\031\uffe1\032\uffe1\033\uffe1\035\uffe1\001" +
    "\002\000\012\002\uffe9\011\uffe9\017\uffe9\020\uffe9\001\002" +
    "\000\012\010\uffd8\031\uffd8\034\uffd8\035\uffd8\001\002\000" +
    "\012\010\103\031\017\034\102\035\025\001\002\000\012" +
    "\031\ufff2\032\ufff2\033\ufff2\035\ufff2\001\002\000\012\010" +
    "\uffd9\031\uffd9\034\uffd9\035\uffd9\001\002\000\012\031\ufff1" +
    "\032\ufff1\033\ufff1\035\ufff1\001\002\000\012\031\ufff3\032" +
    "\ufff3\033\ufff3\035\ufff3\001\002\000\012\031\ufff4\032\ufff4" +
    "\033\ufff4\035\ufff4\001\002\000\012\031\073\032\074\033" +
    "\075\035\077\001\002\000\012\010\uffd6\031\uffd6\034\uffd6" +
    "\035\uffd6\001\002\000\012\031\ufff0\032\ufff0\033\ufff0\035" +
    "\ufff0\001\002\000\012\010\uffd7\031\uffd7\034\uffd7\035\uffd7" +
    "\001\002\000\012\031\ufff5\032\ufff5\033\ufff5\035\ufff5\001" +
    "\002\000\004\011\uffef\001\002\000\004\011\uffec\001\002" +
    "\000\004\011\uffed\001\002\000\004\011\100\001\002\000" +
    "\004\011\uffee\001\002\000\012\002\ufff6\011\ufff6\017\ufff6" +
    "\020\ufff6\001\002\000\004\011\105\001\002\000\014\004" +
    "\uffdc\005\uffdc\006\uffdc\007\uffdc\011\uffdc\001\002\000\012" +
    "\010\103\031\017\034\102\035\025\001\002\000\012\004" +
    "\062\005\057\006\067\007\071\001\002\000\030\004\uffdd" +
    "\005\uffdd\006\uffdd\007\uffdd\011\uffdd\021\uffdd\022\uffdd\023" +
    "\uffdd\024\uffdd\025\uffdd\026\uffdd\001\002\000\012\002\ufffa" +
    "\011\ufffa\017\ufffa\020\ufffa\001\002\000\004\010\016\001" +
    "\002\000\004\010\016\001\002\000\004\011\112\001\002" +
    "\000\012\002\ufffb\011\ufffb\017\ufffb\020\ufffb\001\002\000" +
    "\004\011\ufff9\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\112\000\026\002\013\004\005\005\011\007\014\010" +
    "\012\013\004\014\007\017\003\022\010\024\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\004\017\005\011\006\022\007\014\010\012" +
    "\013\004\014\007\017\003\020\020\022\010\024\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\065" +
    "\001\001\000\004\023\031\001\001\000\002\001\001\000" +
    "\030\004\017\005\011\006\022\007\014\010\012\013\004" +
    "\014\007\017\003\020\025\022\010\024\006\001\001\000" +
    "\002\001\001\000\006\011\065\021\057\001\001\000\004" +
    "\023\031\001\001\000\006\025\037\026\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\050\016" +
    "\046\001\001\000\002\001\001\000\004\015\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\103\001" +
    "\001\000\004\021\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\004\112\005\011\007\014\010\012\013" +
    "\004\014\007\017\003\022\010\024\006\001\001\000\024" +
    "\004\110\005\011\007\014\010\012\013\004\014\007\017" +
    "\003\022\010\024\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PgSelectOperatorInfoParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PgSelectOperatorInfoParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PgSelectOperatorInfoParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  private AndNode root = new AndNode();
  private AbstractAnalyzer analyzer;
  private List<Parameter> parameters;
  private Set<String> columns;
  private String tableName;
  public void setAnalyzer(AbstractAnalyzer analyzer) {
    this.analyzer = analyzer;
  }
  public SelectResult parseSelectOperatorInfo(String operatorInfo) throws Exception {
    this.parameters = new ArrayList<>();
    this.columns = new HashSet<>();
    this.tableName = null;
    this.root = new AndNode();
    ((PgSelectOperatorInfoLexer) this.getScanner()).yyreset(new StringReader(operatorInfo));
    this.debug_parse();
    SelectResult result = new SelectResult();
    result.setParameters(this.parameters);
    result.setCondition(this.root);
    result.setTableName(this.tableName);
    result.setColumns(this.columns);
    return result;
  }
  private String getCanonicalTableName(String canonicalColumnName) {
    String[] names = canonicalColumnName.split("\\.");
    return String.format("%s.%s", names[0], names[1]);
  }
  private void verifyTableName(String tableName) throws TouchstoneException {
    if (this.tableName == null) {
      this.tableName = tableName;
    } else if (!this.tableName.equals(tableName)) {
      throw new TouchstoneException("select表名不一致");
    }
  }
  private float getColumnNullProbability(String tableName, String canonicalColumnName) throws TouchstoneException {
    return ColumnManager.getInstance().getColumn(canonicalColumnName.split("\\.")[2]).getNullPercentage();
  }
  private boolean isColumnNeedQuote(String canonicalColumnName) throws TouchstoneException {
    boolean needQuote = false;
    ColumnType columnType = ColumnManager.getInstance().getColumn(canonicalColumnName.split("\\.")[2]).getColumnType();
    if (columnType == ColumnType.DATETIME || columnType == ColumnType.VARCHAR) {
        needQuote = true;
    }
    return needQuote;
  }
  private boolean isColumnDate(String canonicalColumnName) throws TouchstoneException {
    ColumnType columnType = ColumnManager.getInstance().getColumn(canonicalColumnName.split("\\.")[2]).getColumnType();
    return columnType == ColumnType.DATETIME;
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$PgSelectOperatorInfoParser$actions {
  private final PgSelectOperatorInfoParser parser;

  /** Constructor */
  CUP$PgSelectOperatorInfoParser$actions(PgSelectOperatorInfoParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$PgSelectOperatorInfoParser$do_action_part00000000(
    int                        CUP$PgSelectOperatorInfoParser$act_num,
    java_cup.runtime.lr_parser CUP$PgSelectOperatorInfoParser$parser,
    java.util.Stack            CUP$PgSelectOperatorInfoParser$stack,
    int                        CUP$PgSelectOperatorInfoParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PgSelectOperatorInfoParser$result;

      /* select the action based on the action number */
      switch (CUP$PgSelectOperatorInfoParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= expr EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-1)).value;
		RESULT = start_val;
              CUP$PgSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-1)), ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PgSelectOperatorInfoParser$parser.done_parsing();
          return CUP$PgSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // expr ::= bool_expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).right;
		BoolExprNode e = (BoolExprNode)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.peek()).value;
		
                                                         this.parser.root.addChild(e);
                                                 
              CUP$PgSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$PgSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bool_expr ::= logical_expr 
            {
              BoolExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).right;
		BoolExprNode e = (BoolExprNode)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.peek()).value;
		  RESULT = e;  
              CUP$PgSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("bool_expr",2, ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$PgSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // bool_expr ::= compare_expr 
            {
              BoolExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).right;
		AbstractFilterOperation e = (AbstractFilterOperation)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.peek()).value;
		  RESULT = e;  
              CUP$PgSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("bool_expr",2, ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$PgSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bool_expr ::= isnull_expr 
            {
              BoolExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).right;
		IsNullFilterOperation e = (IsNullFilterOperation)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.peek()).value;
		  RESULT = e;  
              CUP$PgSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("bool_expr",2, ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$PgSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // bool_expr ::= not_expr 
            {
              BoolExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).right;
		AbstractFilterOperation e = (AbstractFilterOperation)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.peek()).value;
		  RESULT = e;  
              CUP$PgSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("bool_expr",2, ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$PgSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // logical_expr ::= LPAREN bool_expr OR bool_expr RPAREN 
            {
              BoolExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-3)).right;
		BoolExprNode e1 = (BoolExprNode)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-3)).value;
		int orleft = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-2)).left;
		int orright = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-2)).right;
		Object or = (Object)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-1)).right;
		BoolExprNode e2 = (BoolExprNode)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-1)).value;
		
                                                                OrNode node = new OrNode();
                                                                node.setLeftNode(e1);
                                                                node.setRightNode(e2);
                                                                RESULT = node;
                                                            
              CUP$PgSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("logical_expr",3, ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-4)), ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$PgSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // logical_expr ::= LPAREN logical_arguments RPAREN 
            {
              BoolExprNode RESULT =null;
		int childrenleft = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-1)).left;
		int childrenright = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-1)).right;
		List<BoolExprNode> children = (List<BoolExprNode>)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-1)).value;
		
                                                                AndNode node = new AndNode();
                                                                for (BoolExprNode child: children) {
                                                                    node.addChild(child);
                                                                }
                                                                RESULT = node;
                                                            
              CUP$PgSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("logical_expr",3, ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-2)), ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$PgSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // logical_arguments ::= bool_expr AND bool_expr 
            {
              List<BoolExprNode> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-2)).right;
		BoolExprNode e1 = (BoolExprNode)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-2)).value;
		int andleft = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-1)).left;
		int andright = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-1)).right;
		Object and = (Object)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).right;
		BoolExprNode e2 = (BoolExprNode)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.peek()).value;
		  RESULT = new ArrayList<>(Arrays.asList(e1, e2));  
              CUP$PgSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("logical_arguments",4, ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-2)), ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$PgSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // compare_expr ::= uni_compare_expr 
            {
              AbstractFilterOperation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).right;
		AbstractFilterOperation e = (AbstractFilterOperation)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.peek()).value;
		  RESULT=e;  
              CUP$PgSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("compare_expr",5, ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$PgSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // compare_expr ::= multi_compare_expr 
            {
              AbstractFilterOperation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).right;
		AbstractFilterOperation e = (AbstractFilterOperation)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.peek()).value;
		  RESULT=e;  
              CUP$PgSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("compare_expr",5, ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$PgSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // uni_compare_expr ::= LPAREN arithmetic_expr uni_compare_operator uni_compare_constant RPAREN 
            {
              AbstractFilterOperation RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-3)).right;
		ArithmeticNode e1 = (ArithmeticNode)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-2)).right;
		CompareOperator op = (CompareOperator)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-2)).value;
		int constantleft = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-1)).left;
		int constantright = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-1)).right;
		String constant = (String)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-1)).value;
		
                                                                                                    AbstractFilterOperation operation;
                                                                                                    boolean needQuote = false, isDate = false;
                                                                                                    if (e1.getType() == ArithmeticNodeType.COLUMN) {
                                                                                                        String canonicalColumnName = String.format("%s.%s", tableName, ((ColumnNode) e1).getCanonicalColumnName());
                                                                                                        operation = new UniVarFilterOperation(canonicalColumnName, op);
                                                                                                        needQuote = isColumnNeedQuote(canonicalColumnName);
                                                                                                        isDate = isColumnDate(canonicalColumnName);
                                                                                                        columns.add(canonicalColumnName);
                                                                                                    } else {
                                                                                                        operation = new MultiVarFilterOperation(op, e1);
                                                                                                    }
                                                                                                    Parameter parameter = new Parameter(analyzer.getParameterId(), e1.toString(), constant);
                                                                                                    operation.addParameter(parameter);
                                                                                                    parameters.add(parameter);
                                                                                                    RESULT = operation;
                                                                                                
              CUP$PgSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("uni_compare_expr",6, ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-4)), ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$PgSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // uni_compare_operator ::= LT 
            {
              CompareOperator RESULT =null;
		int ltleft = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).right;
		CompareOperator lt = (CompareOperator)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.peek()).value;
		  RESULT = lt;  
              CUP$PgSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("uni_compare_operator",7, ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$PgSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // uni_compare_operator ::= GT 
            {
              CompareOperator RESULT =null;
		int gtleft = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).left;
		int gtright = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).right;
		CompareOperator gt = (CompareOperator)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.peek()).value;
		  RESULT = gt;  
              CUP$PgSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("uni_compare_operator",7, ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$PgSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // uni_compare_operator ::= LE 
            {
              CompareOperator RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).right;
		CompareOperator le = (CompareOperator)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.peek()).value;
		  RESULT = le;  
              CUP$PgSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("uni_compare_operator",7, ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$PgSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // uni_compare_operator ::= GE 
            {
              CompareOperator RESULT =null;
		int geleft = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).left;
		int geright = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).right;
		CompareOperator ge = (CompareOperator)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.peek()).value;
		  RESULT = ge;  
              CUP$PgSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("uni_compare_operator",7, ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$PgSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // uni_compare_operator ::= EQ 
            {
              CompareOperator RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).right;
		CompareOperator eq = (CompareOperator)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.peek()).value;
		  RESULT = eq;  
              CUP$PgSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("uni_compare_operator",7, ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$PgSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // uni_compare_operator ::= NE 
            {
              CompareOperator RESULT =null;
		int neleft = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).left;
		int neright = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).right;
		CompareOperator ne = (CompareOperator)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.peek()).value;
		  RESULT = ne;  
              CUP$PgSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("uni_compare_operator",7, ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$PgSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // uni_compare_constant ::= INTEGER 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.peek()).value;
		  RESULT = num.toString();  
              CUP$PgSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("uni_compare_constant",8, ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$PgSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // uni_compare_constant ::= FLOAT 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).right;
		Float num = (Float)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.peek()).value;
		  RESULT = num.toString();  
              CUP$PgSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("uni_compare_constant",8, ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$PgSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // uni_compare_constant ::= DATE 
            {
              String RESULT =null;
		int dateleft = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).left;
		int dateright = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).right;
		String date = (String)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.peek()).value;
		  RESULT = date;  
              CUP$PgSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("uni_compare_constant",8, ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$PgSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // uni_compare_constant ::= STRING 
            {
              String RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.peek()).value;
		  RESULT = str; 
              CUP$PgSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("uni_compare_constant",8, ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$PgSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // multi_compare_expr ::= in_compare_expr 
            {
              AbstractFilterOperation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).right;
		UniVarFilterOperation e = (UniVarFilterOperation)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.peek()).value;
		  RESULT=e;  
              CUP$PgSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("multi_compare_expr",9, ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$PgSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // multi_compare_expr ::= like_compare_expr 
            {
              AbstractFilterOperation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).right;
		UniVarFilterOperation e = (UniVarFilterOperation)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.peek()).value;
		  RESULT=e;  
              CUP$PgSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("multi_compare_expr",9, ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$PgSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // in_compare_expr ::= LPAREN LPAREN CANONICAL_COLUMN_NAME RPAREN in_expr LPAREN in_arguments RPAREN RPAREN 
            {
              UniVarFilterOperation RESULT =null;
		int colleft = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-6)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-6)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-6)).value;
		int inornotinleft = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-4)).left;
		int inornotinright = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-4)).right;
		CompareOperator inornotin = (CompareOperator)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-4)).value;
		int argumentsleft = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-2)).left;
		int argumentsright = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-2)).right;
		List<String> arguments = (List<String>)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-2)).value;
		
                                                                                      String tableName = getCanonicalTableName(col);
                                                                                      verifyTableName(tableName);
                                                                                      UniVarFilterOperation operation = new UniVarFilterOperation(col, inornotin);
                                                                                      boolean needQuote = isColumnNeedQuote(col), isDate = isColumnDate(col);
                                                                                      for (String argument: arguments) {
                                                                                        Parameter parameter = new Parameter(analyzer.getParameterId(), col, argument);
                                                                                        operation.addParameter(parameter);
                                                                                        parameters.add(parameter);
                                                                                      }
                                                                                      columns.add(col);
                                                                                      if(inornotin == CompareOperator.NOT_IN){
                                                                                        operation.setHasNot(true);
                                                                                      }
                                                                                      RESULT = operation;
                                                                                  
              CUP$PgSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("in_compare_expr",10, ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-8)), ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$PgSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // in_expr ::= NOT_IN 
            {
              CompareOperator RESULT =null;
		int notinleft = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).left;
		int notinright = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).right;
		CompareOperator notin = (CompareOperator)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.peek()).value;
		 RESULT = notin; 
              CUP$PgSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("in_expr",19, ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$PgSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // in_expr ::= IN 
            {
              CompareOperator RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).right;
		CompareOperator in = (CompareOperator)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.peek()).value;
		 RESULT = in; 
              CUP$PgSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("in_expr",19, ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$PgSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // in_argument ::= STRING 
            {
              String RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.peek()).value;
		
                                                                                      RESULT = str;
                                                                                  
              CUP$PgSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("in_argument",11, ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$PgSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // in_argument ::= DATE 
            {
              String RESULT =null;
		int dateleft = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).left;
		int dateright = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).right;
		String date = (String)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.peek()).value;
		
                                                                                      RESULT = date;
                                                                                  
              CUP$PgSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("in_argument",11, ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$PgSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // in_argument ::= INTEGER 
            {
              String RESULT =null;
		int integerleft = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).left;
		int integerright = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).right;
		Integer integer = (Integer)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.peek()).value;
		
                                                                                      RESULT = integer.toString();
                                                                                  
              CUP$PgSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("in_argument",11, ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$PgSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // in_argument ::= FLOAT 
            {
              String RESULT =null;
		int float_left = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).left;
		int float_right = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).right;
		Float float_ = (Float)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.peek()).value;
		
                                                                                      RESULT = float_.toString();
                                                                                  
              CUP$PgSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("in_argument",11, ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$PgSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // in_arguments ::= in_argument 
            {
              List<String> RESULT =null;
		int argumentleft = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).left;
		int argumentright = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).right;
		String argument = (String)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.peek()).value;
		
                                                                                      List<String> arguments = new ArrayList<>();
                                                                                      arguments.add(argument);
                                                                                      RESULT = arguments;
                                                                                  
              CUP$PgSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("in_arguments",12, ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$PgSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // in_arguments ::= in_arguments in_argument 
            {
              List<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-1)).right;
		List<String> e1 = (List<String>)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-1)).value;
		int argumentleft = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).left;
		int argumentright = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).right;
		String argument = (String)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.peek()).value;
		
                                                                                      e1.add(argument);
                                                                                      RESULT = e1;
                                                                                  
              CUP$PgSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("in_arguments",12, ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-1)), ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$PgSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // like_compare_expr ::= LPAREN LPAREN CANONICAL_COLUMN_NAME RPAREN like_expr STRING RPAREN 
            {
              UniVarFilterOperation RESULT =null;
		int colleft = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-4)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-4)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-4)).value;
		int likeornotleft = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-2)).left;
		int likeornotright = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-2)).right;
		CompareOperator likeornot = (CompareOperator)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-2)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-1)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-1)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-1)).value;
		
                                                                                            String tableName = getCanonicalTableName(col);
                                                                                            verifyTableName(tableName);
                                                                                            UniVarFilterOperation operation = new UniVarFilterOperation(col, likeornot);
                                                                                            Parameter parameter = new Parameter(analyzer.getParameterId(), col, str);
                                                                                            operation.addParameter(parameter);
                                                                                            parameters.add(parameter);
                                                                                            columns.add(col);
                                                                                            if(likeornot == CompareOperator.NOT_LIKE){
                                                                                              operation.setHasNot(true);
                                                                                            }
                                                                                            RESULT = operation;
                                                                                       
              CUP$PgSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("like_compare_expr",13, ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-6)), ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$PgSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // like_expr ::= NOT_LIKE 
            {
              CompareOperator RESULT =null;
		int notlikeleft = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).left;
		int notlikeright = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).right;
		CompareOperator notlike = (CompareOperator)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.peek()).value;
		 RESULT = notlike; 
              CUP$PgSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("like_expr",20, ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$PgSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // like_expr ::= LIKE 
            {
              CompareOperator RESULT =null;
		int likeleft = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).left;
		int likeright = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).right;
		CompareOperator like = (CompareOperator)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.peek()).value;
		 RESULT = like; 
              CUP$PgSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("like_expr",20, ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$PgSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // arithmetic_expr ::= LPAREN arithmetic_expr arithmetic_operator arithmetic_expr RPAREN 
            {
              ArithmeticNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-3)).right;
		ArithmeticNode e1 = (ArithmeticNode)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-2)).right;
		ArithmeticNodeType op = (ArithmeticNodeType)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-1)).right;
		ArithmeticNode e2 = (ArithmeticNode)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-1)).value;
		
                                                                                                  ArithmeticNode node = ArithmeticNodeFactory.create(op);
                                                                                                  node.setLeftNode(e1);
                                                                                                  node.setRightNode(e2);
                                                                                                  RESULT = node;
                                                                                              
              CUP$PgSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",14, ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-4)), ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$PgSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // arithmetic_expr ::= CANONICAL_COLUMN_NAME 
            {
              ArithmeticNode RESULT =null;
		int colleft = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).left;
		int colright = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.peek()).value;
		
                                                                                      String tableName = getCanonicalTableName(col);
                                                                                      verifyTableName(tableName);
                                                                                      ArithmeticNode node = ArithmeticNodeFactory.create(ArithmeticNodeType.COLUMN);
                                                                                      ((ColumnNode) node).setCanonicalColumnName(col);
                                                                                      columns.add(col);
                                                                                      RESULT = node;
                                                                                  
              CUP$PgSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",14, ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$PgSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // arithmetic_expr ::= INTEGER 
            {
              ArithmeticNode RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.peek()).value;
		
                                                                                      ArithmeticNode node = ArithmeticNodeFactory.create(ArithmeticNodeType.CONSTANT);
                                                                                      ((NumericNode) node).setConstant(num);
                                                                                      RESULT = node;
                                                                                  
              CUP$PgSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",14, ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$PgSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // arithmetic_expr ::= FLOAT 
            {
              ArithmeticNode RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).right;
		Float num = (Float)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.peek()).value;
		
                                                                                      ArithmeticNode node = ArithmeticNodeFactory.create(ArithmeticNodeType.CONSTANT);
                                                                                      ((NumericNode) node).setConstant(num);
                                                                                      RESULT = node;
                                                                                  
              CUP$PgSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",14, ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$PgSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // arithmetic_operator ::= PLUS 
            {
              ArithmeticNodeType RESULT =null;
		int plusleft = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).left;
		int plusright = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).right;
		ArithmeticNodeType plus = (ArithmeticNodeType)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.peek()).value;
		  RESULT = plus;  
              CUP$PgSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("arithmetic_operator",15, ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$PgSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // arithmetic_operator ::= MINUS 
            {
              ArithmeticNodeType RESULT =null;
		int minusleft = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).left;
		int minusright = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).right;
		ArithmeticNodeType minus = (ArithmeticNodeType)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.peek()).value;
		  RESULT = minus;  
              CUP$PgSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("arithmetic_operator",15, ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$PgSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // arithmetic_operator ::= MUL 
            {
              ArithmeticNodeType RESULT =null;
		int mulleft = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).left;
		int mulright = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).right;
		ArithmeticNodeType mul = (ArithmeticNodeType)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.peek()).value;
		  RESULT = mul;  
              CUP$PgSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("arithmetic_operator",15, ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$PgSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // arithmetic_operator ::= DIV 
            {
              ArithmeticNodeType RESULT =null;
		int divleft = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).left;
		int divright = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).right;
		ArithmeticNodeType div = (ArithmeticNodeType)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.peek()).value;
		  RESULT = div;  
              CUP$PgSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("arithmetic_operator",15, ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$PgSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // isnull_expr ::= LPAREN CANONICAL_COLUMN_NAME null_expr RPAREN 
            {
              IsNullFilterOperation RESULT =null;
		int colleft = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-2)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-2)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-2)).value;
		int isornotnullleft = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-1)).left;
		int isornotnullright = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-1)).right;
		CompareOperator isornotnull = (CompareOperator)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-1)).value;
		
                                                                                      String tableName = getCanonicalTableName(col);
                                                                                      verifyTableName(tableName);
                                                                                      float nullProbability = getColumnNullProbability(tableName, col);
                                                                                      IsNullFilterOperation operation = new IsNullFilterOperation(col, BigDecimal.valueOf(nullProbability));
                                                                                      if(isornotnull == CompareOperator.IS_NOT_NULL){
                                                                                        operation.setHasNot(true);
                                                                                      }
                                                                                      RESULT = operation;
                                                                                  
              CUP$PgSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("isnull_expr",16, ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.elementAt(CUP$PgSelectOperatorInfoParser$top-3)), ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$PgSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // null_expr ::= IS_NOT_NULL 
            {
              CompareOperator RESULT =null;
		int isnotnullleft = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).left;
		int isnotnullright = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).right;
		CompareOperator isnotnull = (CompareOperator)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.peek()).value;
		 RESULT = isnotnull; 
              CUP$PgSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("null_expr",17, ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$PgSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // null_expr ::= ISNULL 
            {
              CompareOperator RESULT =null;
		int isnullleft = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).left;
		int isnullright = ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()).right;
		CompareOperator isnull = (CompareOperator)((java_cup.runtime.Symbol) CUP$PgSelectOperatorInfoParser$stack.peek()).value;
		 RESULT = isnull; 
              CUP$PgSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("null_expr",17, ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PgSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$PgSelectOperatorInfoParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$PgSelectOperatorInfoParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$PgSelectOperatorInfoParser$do_action(
    int                        CUP$PgSelectOperatorInfoParser$act_num,
    java_cup.runtime.lr_parser CUP$PgSelectOperatorInfoParser$parser,
    java.util.Stack            CUP$PgSelectOperatorInfoParser$stack,
    int                        CUP$PgSelectOperatorInfoParser$top)
    throws java.lang.Exception
    {
              return CUP$PgSelectOperatorInfoParser$do_action_part00000000(
                               CUP$PgSelectOperatorInfoParser$act_num,
                               CUP$PgSelectOperatorInfoParser$parser,
                               CUP$PgSelectOperatorInfoParser$stack,
                               CUP$PgSelectOperatorInfoParser$top);
    }
}

}
