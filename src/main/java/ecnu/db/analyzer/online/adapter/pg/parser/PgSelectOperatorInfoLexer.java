// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/resources/pg/pg_select_lexer.jflex

package ecnu.db.analyzer.online.adapter.pg.parser;

import ecnu.db.utils.exception.analyze.IllegalCharacterException;
import ecnu.db.analyzer.online.adapter.pg.Token;
import java_cup.runtime.*;
import ecnu.db.generator.constraintchain.arithmetic.ArithmeticNodeType;
import ecnu.db.generator.constraintchain.filter.operation.CompareOperator;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class PgSelectOperatorInfoLexer implements PgSelectSymbol, java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING_LITERAL = 2;
  public static final int STRING_LITERAL_DOUBLE_QUOTATION = 4;
  public static final int IN_LIST = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\10\0\2\1\1\2\2\3\1\2\22\0\1\4\1\5"+
    "\1\6\1\0\1\7\2\0\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\11\22\1\23"+
    "\1\0\1\24\1\25\1\26\2\0\1\27\7\7\1\30"+
    "\2\7\1\31\1\7\1\32\1\33\3\7\1\34\1\35"+
    "\1\36\3\7\1\37\1\7\1\40\1\41\1\42\1\0"+
    "\1\7\1\0\1\43\1\44\1\45\1\46\1\47\1\7"+
    "\1\50\1\51\1\52\3\7\1\53\1\54\1\55\1\56"+
    "\1\7\1\57\1\60\1\61\1\62\1\7\1\63\1\64"+
    "\1\7\1\65\1\66\1\0\1\67\1\70\6\0\1\3"+
    "\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\1\1\3\1\1\1\4\1\5"+
    "\1\6\1\7\1\10\1\1\1\11\1\12\2\13\1\1"+
    "\1\14\1\15\1\16\4\1\1\17\1\20\1\21\1\17"+
    "\1\22\1\23\1\24\2\23\1\1\3\0\1\25\1\2"+
    "\1\26\1\0\1\13\1\0\1\27\1\30\1\0\1\31"+
    "\2\0\1\32\1\33\1\34\1\35\1\36\1\37\1\26"+
    "\2\23\1\40\1\41\1\0\1\26\1\0\1\13\7\0"+
    "\1\42\2\23\2\0\1\13\10\0\2\23\1\43\1\0"+
    "\1\13\6\0\1\44\2\0\1\23\4\0\1\45\7\0"+
    "\1\46\10\0\1\47\5\0\1\50\14\0\1\47\15\0"+
    "\1\47\3\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[161];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\344"+
    "\0\u018f\0\u01c8\0\344\0\344\0\344\0\344\0\u0201\0\344"+
    "\0\344\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e\0\u0357\0\u0390"+
    "\0\u03c9\0\u0402\0\u043b\0\u0474\0\344\0\u04ad\0\u04e6\0\344"+
    "\0\u051f\0\344\0\u0558\0\u0591\0\u05ca\0\u0603\0\u018f\0\u063c"+
    "\0\344\0\344\0\u0675\0\u06ae\0\u06e7\0\u0720\0\344\0\u0759"+
    "\0\u0792\0\344\0\u07cb\0\u0804\0\u018f\0\344\0\344\0\344"+
    "\0\344\0\344\0\u083d\0\u0876\0\u08af\0\344\0\344\0\u08e8"+
    "\0\u0921\0\u095a\0\u0993\0\u09cc\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0"+
    "\0\u0ae9\0\u0b22\0\u018f\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f"+
    "\0\u0c78\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c\0\u0d95\0\u0dce\0\u0e07"+
    "\0\u0e40\0\u0e79\0\u0bcd\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96"+
    "\0\u0fcf\0\u1008\0\u1041\0\344\0\u107a\0\u10b3\0\u10ec\0\u1125"+
    "\0\u115e\0\u1197\0\u11d0\0\344\0\u1209\0\u1242\0\u127b\0\u12b4"+
    "\0\u12ed\0\u1326\0\u135f\0\344\0\u1398\0\u13d1\0\u140a\0\u1443"+
    "\0\u147c\0\u14b5\0\u14ee\0\u1527\0\u1560\0\u1599\0\u15d2\0\u160b"+
    "\0\u1644\0\u167d\0\344\0\u16b6\0\u16ef\0\u1728\0\u1761\0\u179a"+
    "\0\u17d3\0\u180c\0\u1845\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u1962"+
    "\0\u199b\0\u19d4\0\u1a0d\0\u1a46\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a"+
    "\0\u1b63\0\u1b9c\0\u1bd5\0\u1c0e\0\u1c47\0\344\0\u1c80\0\u1cb9"+
    "\0\u1cf2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[161];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\1\0\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\5\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\11\1\30"+
    "\7\11\3\5\1\31\11\11\1\32\10\11\2\5\1\33"+
    "\2\34\1\0\5\34\1\35\30\34\1\36\27\34\2\37"+
    "\1\0\3\37\1\40\32\37\1\36\27\37\1\5\2\6"+
    "\1\0\1\6\1\5\1\10\1\41\5\5\1\42\3\5"+
    "\1\43\1\44\4\5\11\41\3\5\23\41\1\5\1\45"+
    "\1\5\72\0\2\6\1\0\1\6\154\0\1\46\7\0"+
    "\1\47\7\0\1\50\1\0\2\47\4\0\11\47\3\0"+
    "\23\47\71\0\1\51\6\0\1\52\73\0\1\47\7\0"+
    "\1\53\1\0\2\54\4\0\11\47\3\0\23\47\12\0"+
    "\1\47\7\0\1\53\1\0\2\55\4\0\11\47\3\0"+
    "\23\47\26\0\1\56\72\0\1\57\1\60\46\0\1\61"+
    "\111\0\1\62\52\0\1\47\7\0\1\50\1\0\2\47"+
    "\4\0\5\47\1\63\3\47\3\0\23\47\12\0\1\47"+
    "\7\0\1\50\1\0\2\47\4\0\11\47\3\0\11\47"+
    "\1\64\11\47\12\0\1\47\7\0\1\50\1\0\2\47"+
    "\4\0\11\47\3\0\14\47\1\65\6\47\73\0\1\66"+
    "\2\34\1\0\5\34\1\0\30\34\1\0\27\34\6\0"+
    "\1\67\45\0\1\70\2\0\1\71\1\0\1\72\7\0"+
    "\2\37\1\0\3\37\1\0\32\37\1\0\27\37\7\0"+
    "\1\41\11\0\2\41\4\0\11\41\3\0\23\41\12\0"+
    "\1\41\7\0\1\73\1\0\2\74\4\0\11\41\3\0"+
    "\23\41\12\0\1\41\7\0\1\73\1\0\2\75\4\0"+
    "\11\41\3\0\23\41\13\0\1\76\150\0\1\77\7\0"+
    "\1\100\11\0\2\100\4\0\11\100\3\0\23\100\12\0"+
    "\1\100\11\0\2\101\4\0\11\100\3\0\23\100\12\0"+
    "\1\47\7\0\1\50\1\0\2\102\4\0\11\47\3\0"+
    "\23\47\12\0\1\47\7\0\1\53\1\0\2\103\4\0"+
    "\11\47\3\0\23\47\47\0\1\104\1\0\1\105\3\0"+
    "\1\106\6\0\1\107\13\0\1\110\113\0\1\111\45\0"+
    "\1\112\2\0\1\47\7\0\1\50\1\0\2\47\4\0"+
    "\11\47\3\0\23\47\12\0\1\47\7\0\1\50\1\0"+
    "\2\47\4\0\11\47\3\0\3\47\1\113\17\47\24\0"+
    "\2\73\55\0\1\41\11\0\2\114\4\0\11\41\3\0"+
    "\23\41\12\0\1\41\7\0\1\73\1\0\2\115\4\0"+
    "\11\41\3\0\23\41\12\0\1\100\7\0\1\116\1\0"+
    "\2\100\4\0\11\100\3\0\23\100\12\0\1\100\7\0"+
    "\1\116\1\0\2\101\4\0\11\100\3\0\23\100\12\0"+
    "\1\47\7\0\1\50\1\0\2\117\4\0\11\47\3\0"+
    "\23\47\12\0\1\47\7\0\1\53\1\0\2\120\4\0"+
    "\11\47\3\0\23\47\61\0\1\121\55\0\1\122\101\0"+
    "\1\123\63\0\1\124\2\0\1\125\45\0\1\126\73\0"+
    "\1\127\70\0\1\130\45\0\1\41\11\0\2\131\4\0"+
    "\11\41\3\0\23\41\12\0\1\41\7\0\1\73\1\0"+
    "\2\132\4\0\11\41\3\0\23\41\12\0\1\133\11\0"+
    "\2\133\4\0\11\133\3\0\23\133\12\0\1\47\6\0"+
    "\1\134\1\50\1\0\2\47\4\0\11\47\3\0\23\47"+
    "\12\0\1\47\6\0\1\134\1\53\1\0\2\135\4\0"+
    "\11\47\3\0\23\47\50\0\1\136\104\0\1\137\70\0"+
    "\1\140\73\0\1\141\57\0\1\142\46\0\1\143\76\0"+
    "\1\144\64\0\1\145\2\0\1\146\41\0\1\41\6\0"+
    "\1\134\2\0\2\41\4\0\11\41\3\0\23\41\12\0"+
    "\1\41\6\0\1\134\1\73\1\0\2\147\4\0\11\41"+
    "\3\0\23\41\24\0\2\150\55\0\1\47\7\0\1\53"+
    "\1\0\2\135\4\0\11\47\3\0\23\47\54\0\1\151"+
    "\66\0\1\52\70\0\1\152\102\0\1\52\56\0\1\153"+
    "\52\0\1\154\74\0\1\155\64\0\1\156\46\0\1\41"+
    "\7\0\1\73\1\0\2\147\4\0\11\41\3\0\23\41"+
    "\24\0\2\157\111\0\1\160\75\0\1\161\100\0\1\162"+
    "\14\0\1\163\115\0\1\164\55\0\1\165\131\0\1\52"+
    "\60\0\1\166\102\0\1\167\41\0\1\170\57\0\2\171"+
    "\125\0\1\172\54\0\1\173\63\0\1\174\53\0\2\175"+
    "\106\0\1\176\103\0\1\177\46\0\1\200\60\0\2\201"+
    "\110\0\1\52\104\0\1\202\43\0\1\203\60\0\2\204"+
    "\52\0\1\205\107\0\1\206\130\0\1\207\26\0\2\210"+
    "\120\0\1\211\37\0\2\212\127\0\1\213\32\0\1\214"+
    "\116\0\1\215\40\0\2\216\123\0\1\217\34\0\2\220"+
    "\130\0\1\221\25\0\1\222\132\0\1\223\30\0\2\224"+
    "\52\0\1\225\105\0\2\226\127\0\1\227\30\0\2\230"+
    "\120\0\1\231\37\0\2\232\121\0\1\233\36\0\2\234"+
    "\115\0\1\235\42\0\2\236\52\0\1\237\151\0\1\240"+
    "\60\0\1\241\67\0\1\137\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7467];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\2\1\1\11\2\1\4\11\1\1\2\11"+
    "\13\1\1\11\2\1\1\11\1\1\1\11\3\1\3\0"+
    "\2\11\1\1\1\0\1\1\1\0\1\11\1\1\1\0"+
    "\1\11\2\0\1\1\5\11\3\1\2\11\1\0\1\1"+
    "\1\0\1\1\7\0\3\1\2\0\1\1\10\0\3\1"+
    "\1\0\1\1\6\0\1\11\2\0\1\1\4\0\1\11"+
    "\7\0\1\11\10\0\1\1\5\0\1\11\14\0\1\1"+
    "\15\0\1\11\3\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[161];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  private StringBuilder str_buff = new StringBuilder();
  private Symbol symbol(int type) {
    return new Token(type, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new Token(type, yycolumn+1, value);
  }

  public void init() {
    System.out.println("initialized");
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PgSelectOperatorInfoLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException, ecnu.db.utils.exception.TouchstoneException
 {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new IllegalCharacterException(yytext(), yyline + 1, yycolumn + 1);
            }
            // fall through
          case 41: break;
          case 2:
            { 
            }
            // fall through
          case 42: break;
          case 3:
            { str_buff.setLength(0); yybegin(STRING_LITERAL_DOUBLE_QUOTATION);
            }
            // fall through
          case 43: break;
          case 4:
            { str_buff.setLength(0); yybegin(STRING_LITERAL);
            }
            // fall through
          case 44: break;
          case 5:
            { return symbol(LPAREN);
            }
            // fall through
          case 45: break;
          case 6:
            { return symbol(RPAREN);
            }
            // fall through
          case 46: break;
          case 7:
            { return symbol(MUL, ArithmeticNodeType.MUL);
            }
            // fall through
          case 47: break;
          case 8:
            { return symbol(PLUS, ArithmeticNodeType.PLUS);
            }
            // fall through
          case 48: break;
          case 9:
            { return symbol(MINUS, ArithmeticNodeType.MINUS);
            }
            // fall through
          case 49: break;
          case 10:
            { return symbol(DIV, ArithmeticNodeType.DIV);
            }
            // fall through
          case 50: break;
          case 11:
            { return symbol(INTEGER, Integer.valueOf(yytext()));
            }
            // fall through
          case 51: break;
          case 12:
            { return symbol(LT, CompareOperator.LT);
            }
            // fall through
          case 52: break;
          case 13:
            { return symbol(EQ, CompareOperator.EQ);
            }
            // fall through
          case 53: break;
          case 14:
            { return symbol(GT, CompareOperator.GT);
            }
            // fall through
          case 54: break;
          case 15:
            { str_buff.append( yytext() );
            }
            // fall through
          case 55: break;
          case 16:
            { yybegin(YYINITIAL);
    return symbol(STRING, str_buff.toString());
            }
            // fall through
          case 56: break;
          case 17:
            { str_buff.append('\\');
            }
            // fall through
          case 57: break;
          case 18:
            { yybegin(IN_LIST);
    return symbol(STRING, str_buff.toString());
            }
            // fall through
          case 58: break;
          case 19:
            { str_buff.append( yytext() );
    return symbol(STRING, str_buff.toString());
            }
            // fall through
          case 59: break;
          case 20:
            { str_buff.setLength(0);
            }
            // fall through
          case 60: break;
          case 21:
            { str_buff.setLength(0);
    yybegin(IN_LIST);
            }
            // fall through
          case 61: break;
          case 22:
            { return symbol(FLOAT, Float.valueOf(yytext()));
            }
            // fall through
          case 62: break;
          case 23:
            { return symbol(LE, CompareOperator.LE);
            }
            // fall through
          case 63: break;
          case 24:
            { return symbol(NE, CompareOperator.NE);
            }
            // fall through
          case 64: break;
          case 25:
            { return symbol(GE, CompareOperator.GE);
            }
            // fall through
          case 65: break;
          case 26:
            { return symbol(OR);
            }
            // fall through
          case 66: break;
          case 27:
            { return symbol(LIKE, CompareOperator.LIKE);
            }
            // fall through
          case 67: break;
          case 28:
            { str_buff.append('\"');
            }
            // fall through
          case 68: break;
          case 29:
            { str_buff.append('\n');
            }
            // fall through
          case 69: break;
          case 30:
            { str_buff.append('\r');
            }
            // fall through
          case 70: break;
          case 31:
            { str_buff.append('\t');
            }
            // fall through
          case 71: break;
          case 32:
            { yybegin(YYINITIAL);
            }
            // fall through
          case 72: break;
          case 33:
            { return symbol(NOT_LIKE);
            }
            // fall through
          case 73: break;
          case 34:
            { return symbol(AND);
            }
            // fall through
          case 74: break;
          case 35:
            { return symbol(CANONICAL_COLUMN_NAME, yytext());
            }
            // fall through
          case 75: break;
          case 36:
            { return symbol(IN, CompareOperator.IN);
            }
            // fall through
          case 76: break;
          case 37:
            { return symbol(NOT_IN, CompareOperator.NOT_IN);
            }
            // fall through
          case 77: break;
          case 38:
            { return symbol(ISNULL, CompareOperator.ISNULL);
            }
            // fall through
          case 78: break;
          case 39:
            { return symbol(DATE, yytext());
            }
            // fall through
          case 79: break;
          case 40:
            { return symbol(IS_NOT_NULL, CompareOperator.IS_NOT_NULL);
            }
            // fall through
          case 80: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
