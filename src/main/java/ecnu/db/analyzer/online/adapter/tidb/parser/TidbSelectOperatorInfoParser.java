
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ecnu.db.analyzer.online.adapter.tidb.parser;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Set;
import java.util.HashSet;
import java.math.BigDecimal;
import ecnu.db.schema.Schema;
import ecnu.db.schema.ColumnManager;
import ecnu.db.generator.constraintchain.arithmetic.*;
import ecnu.db.generator.constraintchain.arithmetic.operator.*;
import ecnu.db.generator.constraintchain.arithmetic.value.*;
import ecnu.db.generator.constraintchain.filter.operation.*;
import ecnu.db.generator.constraintchain.filter.logical.*;
import ecnu.db.generator.constraintchain.filter.*;
import ecnu.db.analyzer.online.AbstractAnalyzer;
import java.io.StringReader;
import ecnu.db.utils.exception.TouchstoneException;
import ecnu.db.schema.ColumnType;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class TidbSelectOperatorInfoParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return TidbSelectSymbol.class;
}

  /** Default constructor. */
  @Deprecated
  public TidbSelectOperatorInfoParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public TidbSelectOperatorInfoParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public TidbSelectOperatorInfoParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\056\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\005\007\000" +
    "\002\005\006\000\002\006\004\000\002\006\004\000\002" +
    "\007\003\000\002\007\003\000\002\010\007\000\002\010" +
    "\007\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\012\003\000\002\012\003\000\002\013\003\000\002" +
    "\013\003\000\002\014\007\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\016\003" +
    "\000\002\016\004\000\002\017\010\000\002\020\007\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\022\006\000\002\023\006\000\002\023\006" +
    "\000\002\023\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\122\000\032\012\027\013\014\014\006\015\012\016" +
    "\007\017\016\020\017\021\023\022\010\023\025\024\024" +
    "\025\013\001\002\000\034\002\000\012\027\013\014\014" +
    "\006\015\012\016\007\017\016\020\017\021\023\022\010" +
    "\023\025\024\024\025\013\001\002\000\036\002\ufffb\011" +
    "\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb" +
    "\020\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb\001" +
    "\002\000\004\010\116\001\002\000\004\010\ufff1\001\002" +
    "\000\004\010\uffec\001\002\000\004\002\115\001\002\000" +
    "\004\010\111\001\002\000\004\010\077\001\002\000\004" +
    "\010\070\001\002\000\036\002\ufffa\011\ufffa\012\ufffa\013" +
    "\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa" +
    "\022\ufffa\023\ufffa\024\ufffa\025\ufffa\001\002\000\004\010" +
    "\ufff0\001\002\000\004\010\uffef\001\002\000\034\002\ufffe" +
    "\012\ufffe\013\ufffe\014\ufffe\015\ufffe\016\ufffe\017\ufffe\020" +
    "\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\001\002" +
    "\000\036\002\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\015" +
    "\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd" +
    "\024\ufffd\025\ufffd\001\002\000\036\002\uffe9\011\uffe9\012" +
    "\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9" +
    "\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\001\002\000" +
    "\004\010\uffee\001\002\000\004\010\063\001\002\000\004" +
    "\010\uffed\001\002\000\036\002\ufff5\011\ufff5\012\ufff5\013" +
    "\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5" +
    "\022\ufff5\023\ufff5\024\ufff5\025\ufff5\001\002\000\004\010" +
    "\060\001\002\000\036\002\ufffc\011\ufffc\012\ufffc\013\ufffc" +
    "\014\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022" +
    "\ufffc\023\ufffc\024\ufffc\025\ufffc\001\002\000\004\010\034" +
    "\001\002\000\036\002\uffe8\011\uffe8\012\uffe8\013\uffe8\014" +
    "\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8" +
    "\023\uffe8\024\uffe8\025\uffe8\001\002\000\036\002\ufff4\011" +
    "\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4" +
    "\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\001" +
    "\002\000\020\004\042\005\035\006\043\007\044\026\037" +
    "\031\041\032\045\001\002\000\004\010\uffda\001\002\000" +
    "\004\010\054\001\002\000\026\004\uffdd\005\uffdd\006\uffdd" +
    "\007\uffdd\011\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032" +
    "\uffdd\001\002\000\024\004\042\005\035\006\043\007\044" +
    "\026\037\027\050\030\046\031\041\032\045\001\002\000" +
    "\026\004\uffde\005\uffde\006\uffde\007\uffde\011\uffde\026\uffde" +
    "\027\uffde\030\uffde\031\uffde\032\uffde\001\002\000\004\010" +
    "\uffdb\001\002\000\004\010\uffd8\001\002\000\004\010\uffd9" +
    "\001\002\000\026\004\uffdc\005\uffdc\006\uffdc\007\uffdc\011" +
    "\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\001\002" +
    "\000\004\011\uffeb\001\002\000\004\011\053\001\002\000" +
    "\004\011\uffea\001\002\000\004\011\052\001\002\000\036" +
    "\002\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016" +
    "\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3" +
    "\025\ufff3\001\002\000\036\002\ufff2\011\ufff2\012\ufff2\013" +
    "\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2" +
    "\022\ufff2\023\ufff2\024\ufff2\025\ufff2\001\002\000\020\004" +
    "\042\005\035\006\043\007\044\026\037\031\041\032\045" +
    "\001\002\000\020\004\042\005\035\006\043\007\044\026" +
    "\037\031\041\032\045\001\002\000\004\011\057\001\002" +
    "\000\026\004\uffdf\005\uffdf\006\uffdf\007\uffdf\011\uffdf\026" +
    "\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\001\002\000\004" +
    "\031\061\001\002\000\004\011\062\001\002\000\036\002" +
    "\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7" +
    "\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025" +
    "\uffd7\001\002\000\004\031\064\001\002\000\004\027\065" +
    "\001\002\000\004\026\066\001\002\000\004\011\067\001" +
    "\002\000\036\002\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0" +
    "\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023" +
    "\uffe0\024\uffe0\025\uffe0\001\002\000\010\012\027\024\024" +
    "\025\013\001\002\000\004\011\076\001\002\000\004\011" +
    "\075\001\002\000\004\011\074\001\002\000\036\002\uffd6" +
    "\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017" +
    "\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6" +
    "\001\002\000\036\002\uffd5\011\uffd5\012\uffd5\013\uffd5\014" +
    "\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5" +
    "\023\uffd5\024\uffd5\025\uffd5\001\002\000\036\002\uffd4\011" +
    "\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4" +
    "\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\001" +
    "\002\000\004\031\100\001\002\000\012\026\101\027\103" +
    "\030\105\032\106\001\002\000\014\011\uffe4\026\uffe4\027" +
    "\uffe4\030\uffe4\032\uffe4\001\002\000\014\011\107\026\101" +
    "\027\103\030\105\032\106\001\002\000\014\011\uffe6\026" +
    "\uffe6\027\uffe6\030\uffe6\032\uffe6\001\002\000\014\011\uffe2" +
    "\026\uffe2\027\uffe2\030\uffe2\032\uffe2\001\002\000\014\011" +
    "\uffe5\026\uffe5\027\uffe5\030\uffe5\032\uffe5\001\002\000\014" +
    "\011\uffe3\026\uffe3\027\uffe3\030\uffe3\032\uffe3\001\002\000" +
    "\036\002\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7" +
    "\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024" +
    "\uffe7\025\uffe7\001\002\000\014\011\uffe1\026\uffe1\027\uffe1" +
    "\030\uffe1\032\uffe1\001\002\000\032\012\027\013\014\014" +
    "\006\015\012\016\007\017\016\020\017\021\023\022\010" +
    "\023\025\024\024\025\013\001\002\000\032\012\027\013" +
    "\014\014\006\015\012\016\007\017\016\020\017\021\023" +
    "\022\010\023\025\024\024\025\013\001\002\000\004\011" +
    "\114\001\002\000\036\002\ufff9\011\ufff9\012\ufff9\013\ufff9" +
    "\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022" +
    "\ufff9\023\ufff9\024\ufff9\025\ufff9\001\002\000\004\002\001" +
    "\001\002\000\032\012\027\013\014\014\006\015\012\016" +
    "\007\017\016\020\017\021\023\022\010\023\025\024\024" +
    "\025\013\001\002\000\032\012\027\013\014\014\006\015" +
    "\012\016\007\017\016\020\017\021\023\022\010\023\025" +
    "\024\024\025\013\001\002\000\004\011\121\001\002\000" +
    "\036\002\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8" +
    "\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024" +
    "\ufff8\025\ufff8\001\002\000\034\011\ufff7\012\027\013\014" +
    "\014\006\015\012\016\007\017\016\020\017\021\023\022" +
    "\010\023\025\024\024\025\013\001\002\000\004\011\ufff6" +
    "\001\002\000\034\002\uffff\012\uffff\013\uffff\014\uffff\015" +
    "\uffff\016\uffff\017\uffff\020\uffff\021\uffff\022\uffff\023\uffff" +
    "\024\uffff\025\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\122\000\032\002\010\003\003\004\017\005\020\007" +
    "\027\010\025\011\030\013\032\014\021\017\031\022\004" +
    "\023\014\001\001\000\026\004\123\005\020\007\027\010" +
    "\025\011\030\013\032\014\021\017\031\022\004\023\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\020\037\021\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\012" +
    "\050\020\046\021\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\020\054\021\035\001\001\000\006\020\055\021\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\014\071\017\072\022\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\103\016\101\001\001\000\002\001" +
    "\001\000\004\015\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\004\111\005\020\007\027" +
    "\010\025\011\030\013\032\014\021\017\031\022\004\023" +
    "\014\001\001\000\026\004\112\005\020\007\027\010\025" +
    "\011\030\013\032\014\021\017\031\022\004\023\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\004\116\005\020\006\117\007\027\010\025\011" +
    "\030\013\032\014\021\017\031\022\004\023\014\001\001" +
    "\000\030\004\121\005\020\006\122\007\027\010\025\011" +
    "\030\013\032\014\021\017\031\022\004\023\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\004\121\005" +
    "\020\006\122\007\027\010\025\011\030\013\032\014\021" +
    "\017\031\022\004\023\014\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$TidbSelectOperatorInfoParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$TidbSelectOperatorInfoParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$TidbSelectOperatorInfoParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  private final static String CANONICAL_NAME_SPLIT_REGEX = "\\.";
  private AndNode root = new AndNode();
  private AbstractAnalyzer analyzer;
  private List<Parameter> parameters;
  private Set<String> columns;
  private String tableName;
  public void setAnalyzer(AbstractAnalyzer analyzer) {
    this.analyzer = analyzer;
  }
  public SelectResult parseSelectOperatorInfo(String operatorInfo) throws Exception {
    this.parameters = new ArrayList<>();
    this.columns = new HashSet<>();
    this.tableName = null;
    this.root = new AndNode();
    ((TidbSelectOperatorInfoLexer) this.getScanner()).yyreset(new StringReader(operatorInfo));
    this.parse();
    SelectResult result = new SelectResult();
    result.setParameters(this.parameters);
    result.setCondition(this.root);
    result.setTableName(this.tableName);
    result.setColumns(this.columns);
    return result;
  }
  private String getCanonicalTableName(String canonicalColumnName) {
    String[] names = canonicalColumnName.split(CANONICAL_NAME_SPLIT_REGEX);
    return String.format("%s.%s", names[0], names[1]);
  }
  private void verifyTableName(String tableName) throws TouchstoneException {
    if (this.tableName == null) {
      this.tableName = tableName;
    } else if (!this.tableName.equals(tableName)) {
      throw new TouchstoneException("select表名不一致");
    }
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$TidbSelectOperatorInfoParser$actions {
  private final TidbSelectOperatorInfoParser parser;

  /** Constructor */
  CUP$TidbSelectOperatorInfoParser$actions(TidbSelectOperatorInfoParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$TidbSelectOperatorInfoParser$do_action_part00000000(
    int                        CUP$TidbSelectOperatorInfoParser$act_num,
    java_cup.runtime.lr_parser CUP$TidbSelectOperatorInfoParser$parser,
    java.util.Stack            CUP$TidbSelectOperatorInfoParser$stack,
    int                        CUP$TidbSelectOperatorInfoParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$TidbSelectOperatorInfoParser$result;

      /* select the action based on the action number */
      switch (CUP$TidbSelectOperatorInfoParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= expr EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-1)).value;
		RESULT = start_val;
              CUP$TidbSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-1)), ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$TidbSelectOperatorInfoParser$parser.done_parsing();
          return CUP$TidbSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // expr ::= bool_exprs 
            {
              Object RESULT =null;
		int childrenleft = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).left;
		int childrenright = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).right;
		List<BoolExprNode> children = (List<BoolExprNode>)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.peek()).value;
		
                                                     for (BoolExprNode child: children) {
                                                         root.addChild(child);
                                                     }
                                                 
              CUP$TidbSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$TidbSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bool_exprs ::= bool_exprs bool_expr 
            {
              List<BoolExprNode> RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-1)).right;
		List<BoolExprNode> e2 = (List<BoolExprNode>)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).right;
		BoolExprNode e1 = (BoolExprNode)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.peek()).value;
		  e2.add(e1); RESULT = e2;  
              CUP$TidbSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("bool_exprs",1, ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-1)), ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$TidbSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // bool_exprs ::= bool_expr 
            {
              List<BoolExprNode> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).right;
		BoolExprNode e = (BoolExprNode)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.peek()).value;
		
                                                      List<BoolExprNode> children = new ArrayList<>();
                                                      children.add(e);
                                                      RESULT = children;
                                                 
              CUP$TidbSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("bool_exprs",1, ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$TidbSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bool_expr ::= logical_expr 
            {
              BoolExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).right;
		BoolExprNode e = (BoolExprNode)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.peek()).value;
		  RESULT = e;  
              CUP$TidbSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("bool_expr",2, ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$TidbSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // bool_expr ::= compare_expr 
            {
              BoolExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).right;
		AbstractFilterOperation e = (AbstractFilterOperation)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.peek()).value;
		  RESULT = e;  
              CUP$TidbSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("bool_expr",2, ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$TidbSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // bool_expr ::= isnull_expr 
            {
              BoolExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).right;
		IsNullFilterOperation e = (IsNullFilterOperation)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.peek()).value;
		  RESULT = e;  
              CUP$TidbSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("bool_expr",2, ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$TidbSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // bool_expr ::= not_expr 
            {
              BoolExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).right;
		AbstractFilterOperation e = (AbstractFilterOperation)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.peek()).value;
		  RESULT = e;  
              CUP$TidbSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("bool_expr",2, ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$TidbSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // logical_expr ::= OR LPAREN bool_expr bool_expr RPAREN 
            {
              BoolExprNode RESULT =null;
		int orleft = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-4)).left;
		int orright = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-4)).right;
		Object or = (Object)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-2)).right;
		BoolExprNode e1 = (BoolExprNode)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-1)).right;
		BoolExprNode e2 = (BoolExprNode)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-1)).value;
		
                                                                OrNode node = new OrNode();
                                                                node.setLeftNode(e1);
                                                                node.setRightNode(e2);
                                                                RESULT = node;
                                                            
              CUP$TidbSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("logical_expr",3, ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-4)), ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$TidbSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // logical_expr ::= AND LPAREN logical_arguments RPAREN 
            {
              BoolExprNode RESULT =null;
		int andleft = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-3)).left;
		int andright = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-3)).right;
		Object and = (Object)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-3)).value;
		int childrenleft = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-1)).left;
		int childrenright = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-1)).right;
		List<BoolExprNode> children = (List<BoolExprNode>)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-1)).value;
		  
                                                                AndNode node = new AndNode();
                                                                for (BoolExprNode child: children) {
                                                                    node.addChild(child);
                                                                }
                                                                RESULT = node;
                                                            
              CUP$TidbSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("logical_expr",3, ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-3)), ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$TidbSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // logical_arguments ::= bool_expr bool_expr 
            {
              List<BoolExprNode> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-1)).right;
		BoolExprNode e1 = (BoolExprNode)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).right;
		BoolExprNode e2 = (BoolExprNode)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.peek()).value;
		  RESULT = new ArrayList<>(Arrays.asList(e1, e2));  
              CUP$TidbSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("logical_arguments",4, ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-1)), ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$TidbSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // logical_arguments ::= bool_expr logical_arguments 
            {
              List<BoolExprNode> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-1)).right;
		BoolExprNode e1 = (BoolExprNode)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).right;
		List<BoolExprNode> e2 = (List<BoolExprNode>)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.peek()).value;
		  e2.add(e1);  RESULT=e2;  
              CUP$TidbSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("logical_arguments",4, ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-1)), ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$TidbSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // compare_expr ::= uni_compare_expr 
            {
              AbstractFilterOperation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).right;
		AbstractFilterOperation e = (AbstractFilterOperation)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.peek()).value;
		  RESULT=e;  
              CUP$TidbSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("compare_expr",5, ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$TidbSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // compare_expr ::= multi_compare_expr 
            {
              AbstractFilterOperation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).right;
		AbstractFilterOperation e = (AbstractFilterOperation)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.peek()).value;
		  RESULT=e;  
              CUP$TidbSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("compare_expr",5, ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$TidbSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // uni_compare_expr ::= uni_compare_operator LPAREN arithmetic_expr uni_compare_constant RPAREN 
            {
              AbstractFilterOperation RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-4)).right;
		CompareOperator op = (CompareOperator)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-2)).right;
		ArithmeticNode e1 = (ArithmeticNode)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-2)).value;
		int constantleft = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-1)).left;
		int constantright = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-1)).right;
		String constant = (String)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-1)).value;
		
                                                                                                    AbstractFilterOperation operation;
                                                                                                    if (e1.getType() == ArithmeticNodeType.COLUMN) {
                                                                                                        String canonicalColumnName = ((ColumnNode) e1).getCanonicalColumnName();
                                                                                                        operation = new UniVarFilterOperation(canonicalColumnName, op);
                                                                                                        columns.add(canonicalColumnName);
                                                                                                    } else {
                                                                                                        operation = new MultiVarFilterOperation(op, e1);
                                                                                                    }
                                                                                                    Parameter parameter = new Parameter(analyzer.getParameterId(), e1.toString(), constant);
                                                                                                    operation.addParameter(parameter);
                                                                                                    parameters.add(parameter);
                                                                                                    RESULT = operation;
                                                                                                
              CUP$TidbSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("uni_compare_expr",6, ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-4)), ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$TidbSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // uni_compare_expr ::= uni_compare_operator LPAREN arithmetic_expr arithmetic_expr RPAREN 
            {
              AbstractFilterOperation RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-4)).right;
		CompareOperator op = (CompareOperator)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-2)).right;
		ArithmeticNode e1 = (ArithmeticNode)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-1)).right;
		ArithmeticNode e2 = (ArithmeticNode)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-1)).value;
		
                                                                                                    if (e2.getType() == ArithmeticNodeType.CONSTANT) {
                                                                                                        AbstractFilterOperation operation;
                                                                                                        if (e1.getType() == ArithmeticNodeType.COLUMN) {
                                                                                                            String canonicalColumnName = ((ColumnNode) e1).getCanonicalColumnName();
                                                                                                            operation = new UniVarFilterOperation(canonicalColumnName, op);
                                                                                                            columns.add(canonicalColumnName);
                                                                                                        } else {
                                                                                                            operation = new MultiVarFilterOperation(op, e1);
                                                                                                        }
                                                                                                        Parameter parameter = new Parameter(analyzer.getParameterId(), e1.toString(), ((NumericNode) e2).toString());
                                                                                                        operation.addParameter(parameter);
                                                                                                        parameters.add(parameter);
                                                                                                        RESULT = operation;
                                                                                                    } else {
                                                                                                        AbstractFilterOperation operation;
                                                                                                        if (e1.getType() == ArithmeticNodeType.COLUMN) {
                                                                                                            String canonicalColumnName = ((ColumnNode) e1).getCanonicalColumnName();
                                                                                                            columns.add(canonicalColumnName);
                                                                                                        }
                                                                                                        if (e2.getType() == ArithmeticNodeType.COLUMN) {
                                                                                                            String canonicalColumnName = ((ColumnNode) e2).getCanonicalColumnName();
                                                                                                            columns.add(canonicalColumnName);
                                                                                                        }
                                                                                                        ArithmeticNode e = ArithmeticNodeFactory.create(ArithmeticNodeType.MINUS);
                                                                                                        e.setLeftNode(e1);
                                                                                                        e.setRightNode(e2);
                                                                                                        operation = new MultiVarFilterOperation(op, e);
                                                                                                        Parameter parameter = new Parameter(analyzer.getParameterId(), e.toString(), "0");
                                                                                                        operation.addParameter(parameter);
                                                                                                        parameters.add(parameter);
                                                                                                        RESULT = operation;
                                                                                                    }
                                                                                                
              CUP$TidbSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("uni_compare_expr",6, ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-4)), ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$TidbSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // uni_compare_operator ::= LT 
            {
              CompareOperator RESULT =null;
		int ltleft = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).right;
		CompareOperator lt = (CompareOperator)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.peek()).value;
		  RESULT = lt;  
              CUP$TidbSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("uni_compare_operator",7, ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$TidbSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // uni_compare_operator ::= GT 
            {
              CompareOperator RESULT =null;
		int gtleft = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).left;
		int gtright = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).right;
		CompareOperator gt = (CompareOperator)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.peek()).value;
		  RESULT = gt;  
              CUP$TidbSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("uni_compare_operator",7, ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$TidbSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // uni_compare_operator ::= LE 
            {
              CompareOperator RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).right;
		CompareOperator le = (CompareOperator)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.peek()).value;
		  RESULT = le;  
              CUP$TidbSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("uni_compare_operator",7, ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$TidbSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // uni_compare_operator ::= GE 
            {
              CompareOperator RESULT =null;
		int geleft = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).left;
		int geright = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).right;
		CompareOperator ge = (CompareOperator)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.peek()).value;
		  RESULT = ge;  
              CUP$TidbSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("uni_compare_operator",7, ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$TidbSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // uni_compare_operator ::= EQ 
            {
              CompareOperator RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).right;
		CompareOperator eq = (CompareOperator)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.peek()).value;
		  RESULT = eq;  
              CUP$TidbSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("uni_compare_operator",7, ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$TidbSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // uni_compare_operator ::= NE 
            {
              CompareOperator RESULT =null;
		int neleft = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).left;
		int neright = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).right;
		CompareOperator ne = (CompareOperator)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.peek()).value;
		  RESULT = ne;  
              CUP$TidbSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("uni_compare_operator",7, ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$TidbSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // uni_compare_constant ::= DATE 
            {
              String RESULT =null;
		int dateleft = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).left;
		int dateright = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).right;
		String date = (String)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.peek()).value;
		  RESULT = date;  
              CUP$TidbSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("uni_compare_constant",8, ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$TidbSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // uni_compare_constant ::= STRING 
            {
              String RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.peek()).value;
		  RESULT = str; 
              CUP$TidbSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("uni_compare_constant",8, ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$TidbSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // multi_compare_expr ::= in_compare_expr 
            {
              AbstractFilterOperation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).right;
		UniVarFilterOperation e = (UniVarFilterOperation)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.peek()).value;
		  RESULT=e;  
              CUP$TidbSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("multi_compare_expr",9, ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$TidbSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // multi_compare_expr ::= like_compare_expr 
            {
              AbstractFilterOperation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).right;
		UniVarFilterOperation e = (UniVarFilterOperation)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.peek()).value;
		  RESULT=e;  
              CUP$TidbSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("multi_compare_expr",9, ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$TidbSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // in_compare_expr ::= IN LPAREN CANONICAL_COLUMN_NAME in_arguments RPAREN 
            {
              UniVarFilterOperation RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-4)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-4)).right;
		CompareOperator in = (CompareOperator)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-4)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-2)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-2)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-2)).value;
		int argumentsleft = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-1)).left;
		int argumentsright = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-1)).right;
		List<String> arguments = (List<String>)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-1)).value;
		
                                                                                      String tableName = getCanonicalTableName(col);
                                                                                      verifyTableName(tableName);
                                                                                      UniVarFilterOperation operation = new UniVarFilterOperation(col, in);
                                                                                      for (String argument: arguments) {
                                                                                        Parameter parameter = new Parameter(analyzer.getParameterId(), col, argument);
                                                                                        operation.addParameter(parameter);
                                                                                        parameters.add(parameter);
                                                                                      }
                                                                                      columns.add(col);
                                                                                      RESULT = operation;
                                                                                  
              CUP$TidbSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("in_compare_expr",10, ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-4)), ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$TidbSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // in_argument ::= STRING 
            {
              String RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.peek()).value;
		
                                                                                      RESULT = str;
                                                                                  
              CUP$TidbSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("in_argument",11, ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$TidbSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // in_argument ::= DATE 
            {
              String RESULT =null;
		int dateleft = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).left;
		int dateright = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).right;
		String date = (String)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.peek()).value;
		
                                                                                      RESULT = date;
                                                                                  
              CUP$TidbSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("in_argument",11, ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$TidbSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // in_argument ::= INTEGER 
            {
              String RESULT =null;
		int integerleft = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).left;
		int integerright = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).right;
		Integer integer = (Integer)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.peek()).value;
		
                                                                                      RESULT = integer.toString();
                                                                                  
              CUP$TidbSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("in_argument",11, ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$TidbSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // in_argument ::= FLOAT 
            {
              String RESULT =null;
		int float_left = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).left;
		int float_right = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).right;
		Float float_ = (Float)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.peek()).value;
		
                                                                                      RESULT = float_.toString();
                                                                                  
              CUP$TidbSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("in_argument",11, ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$TidbSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // in_arguments ::= in_argument 
            {
              List<String> RESULT =null;
		int argumentleft = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).left;
		int argumentright = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).right;
		String argument = (String)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.peek()).value;
		
                                                                                      List<String> arguments = new ArrayList<>();
                                                                                      arguments.add(argument);
                                                                                      RESULT = arguments;
                                                                                  
              CUP$TidbSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("in_arguments",12, ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$TidbSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // in_arguments ::= in_arguments in_argument 
            {
              List<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-1)).right;
		List<String> e1 = (List<String>)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-1)).value;
		int argumentleft = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).left;
		int argumentright = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).right;
		String argument = (String)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.peek()).value;
		
                                                                                      e1.add(argument);
                                                                                      RESULT = e1;
                                                                                  
              CUP$TidbSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("in_arguments",12, ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-1)), ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$TidbSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // like_compare_expr ::= LIKE LPAREN CANONICAL_COLUMN_NAME STRING INTEGER RPAREN 
            {
              UniVarFilterOperation RESULT =null;
		int likeleft = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-5)).left;
		int likeright = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-5)).right;
		CompareOperator like = (CompareOperator)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-5)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-3)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-3)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-3)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-2)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-2)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-2)).value;
		
                                                                                      String tableName = getCanonicalTableName(col);
                                                                                      verifyTableName(tableName);
                                                                                      UniVarFilterOperation operation = new UniVarFilterOperation(col, like);
                                                                                      Parameter parameter = new Parameter(analyzer.getParameterId(), col, str);
                                                                                      operation.addParameter(parameter);
                                                                                      parameters.add(parameter);
                                                                                      columns.add(col);
                                                                                      RESULT = operation;
                                                                                  
              CUP$TidbSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("like_compare_expr",13, ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-5)), ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$TidbSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // arithmetic_expr ::= arithmetic_operator LPAREN arithmetic_expr arithmetic_expr RPAREN 
            {
              ArithmeticNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-4)).right;
		ArithmeticNodeType op = (ArithmeticNodeType)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-2)).right;
		ArithmeticNode e1 = (ArithmeticNode)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-1)).right;
		ArithmeticNode e2 = (ArithmeticNode)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-1)).value;
		
                                                                                                  ArithmeticNode node = ArithmeticNodeFactory.create(op);
                                                                                                  node.setLeftNode(e1);
                                                                                                  node.setRightNode(e2);
                                                                                                  RESULT = node;
                                                                                              
              CUP$TidbSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",14, ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-4)), ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$TidbSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // arithmetic_expr ::= CANONICAL_COLUMN_NAME 
            {
              ArithmeticNode RESULT =null;
		int colleft = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).left;
		int colright = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.peek()).value;
		
                                                                                      String tableName = getCanonicalTableName(col);
                                                                                      verifyTableName(tableName);
                                                                                      ArithmeticNode node = ArithmeticNodeFactory.create(ArithmeticNodeType.COLUMN);
                                                                                      ((ColumnNode) node).setCanonicalColumnName(col);
                                                                                      columns.add(col);
                                                                                      RESULT = node;
                                                                                  
              CUP$TidbSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",14, ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$TidbSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // arithmetic_expr ::= INTEGER 
            {
              ArithmeticNode RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.peek()).value;
		
                                                                                      ArithmeticNode node = ArithmeticNodeFactory.create(ArithmeticNodeType.CONSTANT);
                                                                                      ((NumericNode) node).setConstant(num);
                                                                                      RESULT = node;
                                                                                  
              CUP$TidbSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",14, ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$TidbSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // arithmetic_expr ::= FLOAT 
            {
              ArithmeticNode RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).right;
		Float num = (Float)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.peek()).value;
		
                                                                                      ArithmeticNode node = ArithmeticNodeFactory.create(ArithmeticNodeType.CONSTANT);
                                                                                      ((NumericNode) node).setConstant(num);
                                                                                      RESULT = node;
                                                                                  
              CUP$TidbSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",14, ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$TidbSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // arithmetic_operator ::= PLUS 
            {
              ArithmeticNodeType RESULT =null;
		int plusleft = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).left;
		int plusright = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).right;
		ArithmeticNodeType plus = (ArithmeticNodeType)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.peek()).value;
		  RESULT = plus;  
              CUP$TidbSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("arithmetic_operator",15, ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$TidbSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // arithmetic_operator ::= MINUS 
            {
              ArithmeticNodeType RESULT =null;
		int minusleft = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).left;
		int minusright = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).right;
		ArithmeticNodeType minus = (ArithmeticNodeType)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.peek()).value;
		  RESULT = minus;  
              CUP$TidbSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("arithmetic_operator",15, ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$TidbSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // arithmetic_operator ::= MUL 
            {
              ArithmeticNodeType RESULT =null;
		int mulleft = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).left;
		int mulright = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).right;
		ArithmeticNodeType mul = (ArithmeticNodeType)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.peek()).value;
		  RESULT = mul;  
              CUP$TidbSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("arithmetic_operator",15, ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$TidbSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // arithmetic_operator ::= DIV 
            {
              ArithmeticNodeType RESULT =null;
		int divleft = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).left;
		int divright = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()).right;
		ArithmeticNodeType div = (ArithmeticNodeType)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.peek()).value;
		  RESULT = div;  
              CUP$TidbSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("arithmetic_operator",15, ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$TidbSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // isnull_expr ::= ISNULL LPAREN CANONICAL_COLUMN_NAME RPAREN 
            {
              IsNullFilterOperation RESULT =null;
		int isnullleft = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-3)).left;
		int isnullright = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-3)).right;
		CompareOperator isnull = (CompareOperator)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-3)).value;
		int canonicalColumnNameleft = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-1)).left;
		int canonicalColumnNameright = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-1)).right;
		String canonicalColumnName = (String)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-1)).value;
		
                                                                                      String tableName = getCanonicalTableName(canonicalColumnName);
                                                                                      verifyTableName(tableName);
                                                                                      float nullProbability = ColumnManager.getInstance().getNullPercentage(canonicalColumnName);
                                                                                      IsNullFilterOperation operation = new IsNullFilterOperation(canonicalColumnName, BigDecimal.valueOf(nullProbability));
                                                                                      RESULT = operation;
                                                                                  
              CUP$TidbSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("isnull_expr",16, ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-3)), ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$TidbSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // not_expr ::= NOT LPAREN like_compare_expr RPAREN 
            {
              AbstractFilterOperation RESULT =null;
		int notleft = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-3)).left;
		int notright = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-3)).right;
		Object not = (Object)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-1)).right;
		UniVarFilterOperation e = (UniVarFilterOperation)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-1)).value;
		
                                                                                      e.setHasNot(true);
                                                                                      RESULT = e;
                                                                                  
              CUP$TidbSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("not_expr",17, ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-3)), ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$TidbSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // not_expr ::= NOT LPAREN in_compare_expr RPAREN 
            {
              AbstractFilterOperation RESULT =null;
		int notleft = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-3)).left;
		int notright = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-3)).right;
		Object not = (Object)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-1)).right;
		UniVarFilterOperation e = (UniVarFilterOperation)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-1)).value;
		
                                                                                      e.setHasNot(true);
                                                                                      RESULT = e;
                                                                                  
              CUP$TidbSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("not_expr",17, ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-3)), ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$TidbSelectOperatorInfoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // not_expr ::= NOT LPAREN isnull_expr RPAREN 
            {
              AbstractFilterOperation RESULT =null;
		int notleft = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-3)).left;
		int notright = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-3)).right;
		Object not = (Object)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-1)).right;
		IsNullFilterOperation e = (IsNullFilterOperation)((java_cup.runtime.Symbol) CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-1)).value;
		
                                                                                      e.setHasNot(true);
                                                                                      RESULT = e;
                                                                                  
              CUP$TidbSelectOperatorInfoParser$result = parser.getSymbolFactory().newSymbol("not_expr",17, ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.elementAt(CUP$TidbSelectOperatorInfoParser$top-3)), ((java_cup.runtime.Symbol)CUP$TidbSelectOperatorInfoParser$stack.peek()), RESULT);
            }
          return CUP$TidbSelectOperatorInfoParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$TidbSelectOperatorInfoParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$TidbSelectOperatorInfoParser$do_action(
    int                        CUP$TidbSelectOperatorInfoParser$act_num,
    java_cup.runtime.lr_parser CUP$TidbSelectOperatorInfoParser$parser,
    java.util.Stack            CUP$TidbSelectOperatorInfoParser$stack,
    int                        CUP$TidbSelectOperatorInfoParser$top)
    throws java.lang.Exception
    {
              return CUP$TidbSelectOperatorInfoParser$do_action_part00000000(
                               CUP$TidbSelectOperatorInfoParser$act_num,
                               CUP$TidbSelectOperatorInfoParser$parser,
                               CUP$TidbSelectOperatorInfoParser$stack,
                               CUP$TidbSelectOperatorInfoParser$top);
    }
}

}
